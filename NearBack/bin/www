#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nearback:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7499');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', socket => {
	console.log('connected client');
	//경찰 출동 확인 가능여부 확인 중
	socket.on('POLICE_CALLNOW', () => {
		console.log('Socket is here! ', socket.id);
		io.emit('POLICE_MESSAGE');
	});
	//경찰이 출동한다고 알림
	socket.on('POLICE_CALLBACK', data => {
		console.log(data);
		io.emit("SEND_POLICE_INFO", console.log("보냈다잉!!!!"));

	});
	//전체 사건완료
	socket.on('JOBS_DONE', data => {
		console.log("JOBS DONE!");
		io.emit('JOBS_done', data);
	});
	//라즈베리파이 사용자 콜이옴
	socket.on('VICTIM_CALL', victimID => {
		console.log(victimID);
		io.emit('redImage', victimID);
	});
	//사용자에게 신고확인을 받음
	socket.on('VICTIM_CHECK', () => {
		io.emit('VICTIMCHECK');
	});
	//사용자 취소신청
	socket.on('CANCEL_CALL', () => {
		console.log('사용자 취소 신청!');
		io.emit('victim_cancel');
	});
	// socket.on('disconnected', data => {
	// 	console.log('disconnected!');
	// });
	// 사용자가 신고가 맞다면 빨간버튼과 신고접수로 바꾸기
	socket.on('GRANT_CALL', data => {
		console.log(data);
		io.emit('CHECK_BUTTON');
	});

	//11/25/19 해야할일
	//경찰 출동 불가 상태 전송해서 웹 표시 바꾸기
	socket.on('POLICE_ISBUSY', () => {
		console.log('경찰이 다른 엄무때매 바빠요!');
		io.emit('POLICE_BUSY');
	});
	//경찰 출동 가능 상태 전송해서 웹 표시 바꾸기
	socket.on('POLICE_CAN_WORK_NOW', () => {
		console.log('경찰이 출동이 가능해졌어요!');
		io.emit('POLICE_CAN_WORK');
	});
	//사용자 신고 접수, 출동 배정 후, 신고 취소 상황시, 웹 페이지 바꾸기
	socket.on('VICTIM_NO_NEED_POLICE', (data) => {
		console.log(data);
		console.log('난 경찰이 필요 없다구요!');
		io.emit('VICTIM_NO_NEED_HELP');
	});
	socket.on('LOGOUT_POLICE', () => {
		io.emit('KILL_POLICE');
	})
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}